name: Tabula-AI (Note-Dev CI/CD)
run-name: '${{ github.event.pull_request.title }}'

# Event: main branch merge
on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths:
      - 'services/note-service/**'
      - 'libs/note-sdk/**'
      - 'libs/common-sdk/**'
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build & Push Note Service Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    steps:
      # Actions: chekcout action3
      - name: Checkout Code
        uses: actions/checkout@v3
      
      # 플랫폼 불일치 문제 해결을 위해 QEMU 설치
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Dockerhub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker build
      - name: Build Docker Image
        run: docker buildx build --platform linux/arm64/v8 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.NOTE_DEV_APPLICATION }}:latest -f Dockerfile.noteDev .
  
      # Docker push
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.NOTE_DEV_APPLICATION }}:latest
    
  deploy:
    name: deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true

    steps:
      # 라즈베리 파이 서버 연결 및 배포
      - name: Executing remote ssh commands
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.REMOTE_HOST }} # 원격 서버 IP
          username: ${{ secrets.REMOTE_USERNAME }} # 우분투 아이디
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }} # 접속포트
          script: |
            cd ai
            docker stop ${{ secrets.NOTE_DEV_APPLICATION }}
            docker rm ${{ secrets.NOTE_DEV_APPLICATION }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.NOTE_DEV_APPLICATION }}:latest
            docker run --name ${{ secrets.NOTE_DEV_APPLICATION }} -d --network ${{ secrets.NETWORK_NAME }} -p 8000:8000 -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} -e AWS_REGION=${{ secrets.AWS_REGION }} -e S3_BUCKET=${{ secrets.S3_BUCKET }} --env-file .env ${{ secrets.DOCKER_USERNAME }}/${{ secrets.NOTE_DEV_APPLICATION }}:latest
            docker image prune -a -f
